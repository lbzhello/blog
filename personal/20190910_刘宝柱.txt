// 第一题
public int[][] merge(int[][] intervals) {
    if (intervals == null) return null;

    int len = intervals.length;

    // e.g. [[1 2]]
    if (len < 2) return intervals;

    int[][] rst = new int[len][2];

    // rst 长度，当前索引
    int rstLen = 0;

    // 比较元素
    int[] leftElement = intervals[0];

    int i = 1;
    while (i < len) {
        int[] rightElement = intervals[i];
        // 生成
        if (leftElement[1] < rightElement[0]) { // [1 2] [4 6] -> [1 2]
            rst[rstLen++] = leftElement;
            leftElement = rightElement;
        } else if (leftElement[1] >= rightElement[0] && leftElement[1] <= rightElement[1]) {
            // [2 6] [3 7] -> [2 7]
            leftElement = new int[]{leftElement[0], rightElement[1]};
        }
        i++;
    }

    // 最后一个元素放入结果
    // 可能出现 [... [2 6] [3 12] [6 8]] 此时舍弃
    if (rstLen > 0 && rst[rstLen - 1][1] < leftElement[1]) {
        rst[rstLen++] = leftElement;
    }

    return Arrays.copyOf(rst, rstLen);
}

// 第二题
public boolean valid(String word, String abbr) {
    // 根据 abbr 计算出的 word 字符个数
    int count = 0;
    for (int i = 0; i < abbr.length(); ) {
        char curChar = abbr.charAt(i);
        if (Character.isDigit(curChar)) {
            // 用于提取 abbr 中的数字
            StringBuilder sb = new StringBuilder();
            sb.append(curChar);
            i++;
            char nextChar;
            while (i < abbr.length() && Character.isDigit(nextChar = abbr.charAt(i))) {
                sb.append(nextChar);
                i++;
            }
            int num = Integer.parseInt(sb.toString());
            count += num;
            if (count > word.length()) return false; // "hello" "h88"
        } else if (count >= word.length() //e.g.  "hello" h88o
                || word.charAt(count) != curChar) {
            return false;
        } else {
            count++;
            i++;
        }
    }
    return true;
}

// 第三题

